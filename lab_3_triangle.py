# Силинг Екатерина. Эта программа по координатам вершин треугольника выводит длины сторон, равнобедренность, длину биссектрисы, проведенную из наибольшего угла и лежит ли заданная точка внутри треугольника
from math import sqrt

# блок ввода

x1 = float(input('Введите Х координату первой точки: '))
y1 = float(input('Введите У координату первой точки: '))
x2 = float(input('Введите Х координату второй точки: '))
y2 = float(input('Введите У координату второй точки: '))
x3 = float(input('Введите Х координату третьей точки: '))
y3 = float(input('Введите У координату третьей точки: '))
X = float(input('Введите Х координату искомой точки: '))
Y = float(input('Введите У координату искомой точки: '))
k1, b1, k2, b2, k3, b3 = 0, 0, 0, 0, 0, 0
vert_1, vert_2, vert_3 = False, False, False
# vert_i - вертикальность i-той стороны
# вычисление уравнений прямых для сторон треугольника. В случае вертикальности уравнение задать нельзя
if x1 - x2 != 0:
    k1 = (y1 - y2) / (x1 - x2)
    b1 = y1 - (y1 - y2) / (x1 - x2) * x1
else:
    vert_1 = True
if x1 - x3 != 0:
    k2 = (y1 - y3) / (x1 - x3)
    b2 = y1 - (y1 - y3) / (x1 - x3) * x1
else:
    vert_2 = True
if x3 - x2 != 0:
    k3 = (y3 - y2) / (x3 - x2)
    b3 = y3 - (y3 - y2) / (x3 - x2) * x3
else:
    vert_3 = True
# вычисление длин сторон
a = abs(sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2))
b = abs(sqrt((x1 - x3) ** 2 + (y1 - y3) ** 2))
c = abs(sqrt((x3 - x2) ** 2 + (y3 - y2) ** 2))
print('Стороны равны {aa:.7f}, {bb:.7f}, {cc:.7f}'.format(aa=a, bb=b, cc=c))
sides = [a, b, c]  # чтобы определить наибольший угол, распределим стороны по длине от меньшей к большей
sides.sort()
# вычисление косинуса большого угла, его половины и длины биссектрисы по формуле
cos_big = (sides[0] ** 2 + sides[1] ** 2 - sides[2] ** 2) / (2 * sides[0] * sides[1])
cos_small = sqrt((1 + cos_big) / 2)
bissectris = (2 * sides[0] * sides[1] * cos_small) / (sides[0] + sides[1])
print('Длина биссектрисы из наибольшего угла: {0:.7f}'.format(bissectris))
# вычисление координат точки пересечения медиан - так как она точно лежит внутри треугольника
xm = (x1 + x2 + x3) / 3
ym = (y1 + y2 + y3) / 3
# далее вычисляем остальные косинусы

cos_1 = (sides[0] ** 2 + sides[2] ** 2 - sides[1] ** 2) / (2 * sides[0] * sides[2]) # косинус угла между 0 и 2 стороной
cos_2 = (sides[1] ** 2 + sides[2] ** 2 - sides[0] ** 2) / (2 * sides[1] * sides[2]) # косинус угла между 1 и 2 стороной
# если хоть какие-то косинусы равны, он р/б
if cos_1 == cos_2 or cos_1 == cos_big or cos_2 == cos_big:
    print('Треугольник равнобедренный.')
else:
    print('Треугольник НЕравнобедренный.')
in_triangle = True
# сравнение отношения координат медианы к прямым, задающим стороны, и искомой точки. если относятся одингаково, точка лежит внутри.
# для первой стороны - если она не вертикальна, проверяем отношения. Еесли вертикальна, проверяем отношения Х координат
if vert_1 == False and (not (ym < xm * k1 + b1 and Y < X * k1 + b1) and not (ym > xm * k1 + b1 and Y > X * k1 + b1)):
    in_triangle = False
elif vert_1 == True:
    if not (xm > x1 and X > x1) or not (xm < x1 and X < x1):
        in_triangle = False
# для второй стороны - если она не вертикальна, проверяем отношения. Еесли вертикальна, проверяем отношения Х координат
if vert_2 == False and (not (ym < xm * k2 + b2 and Y < X * k2 + b2) and not (ym > xm * k2 + b2 and Y > X * k2 + b2)):
    in_triangle = False
elif vert_2 == True:
    if not (xm > x2 and X > x2) and not (xm < x2 and X < x2):
        in_triangle = False
# для третьей стороны - если она не вертикальна, проверяем отношения. Еесли вертикальна, проверяем отношения Х координат
if vert_3 == False and not (ym < xm * k3 + b3 and Y < X * k3 + b3) and not (ym > xm * k3 + b3 and Y > X * k3 + b3):
    in_triangle = False
elif vert_3 == True:
    if not (xm > x3 and X > x3) and not (xm < x3 and X < x3):
        in_triangle = False
if in_triangle == True:
    print('Точка лежит ВНУТРИ треугольника.')
    if vert_1 == False and vert_1 == False and vert_1 == False:
        # считаем расстояния до прямых, определяющих стороны
        d_1 = abs(k1 * X - Y + b1) / sqrt(k1 ** 2 + (-1) ** 2)
        d_2 = abs(k2 * X - Y + b2) / sqrt(k2 ** 2 + (-1) ** 2)
        d_3 = abs(k3 * X - Y + b3) / sqrt(k3 ** 2 + (-1) ** 2)
    elif vert_1 == True:
        # считаем расстояния до прямых, определяющих стороны
        d_1 = abs(X-x1)
        d_2 = abs(k2 * X - Y + b2) / sqrt(k2 ** 2 + (-1) ** 2)
        d_3 = abs(k3 * X - Y + b3) / sqrt(k3 ** 2 + (-1) ** 2)
    elif vert_2 == True:
        # считаем расстояния до прямых, определяющих стороны
        d_1 = abs(k1 * X - Y + b1) / sqrt(k1 ** 2 + (-1) ** 2)
        d_2 = abs(X-x2)
        d_3 = abs(k3 * X - Y + b3) / sqrt(k3 ** 2 + (-1) ** 2)
    elif vert_3 == True:
        # считаем расстояния до прямых, определяющих стороны
        d_1 = abs(k1 * X - Y + b1) / sqrt(k1 ** 2 + (-1) ** 2)
        d_2 = abs(k2 * X - Y + b2) / sqrt(k2 ** 2 + (-1) ** 2)
        d_3 = abs(X-x3)
    d = min(d_1, d_2, d_3)
    print('Минимальное расстояние до стороны: {0:.7f}'.format(d))
else:
    print('Точка лежит ВНЕ треугольника.')

